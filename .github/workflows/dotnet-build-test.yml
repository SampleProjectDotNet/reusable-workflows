name: Build, Test and Sonar Analysis

on:
  workflow_call:

jobs:
  build-and-test:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.sln') }}

      - name: Detect solution and project paths
        id: detect-paths
        shell: pwsh
        run: |
          $sln = Get-ChildItem -Path "." -Filter "*.sln" -Recurse -File | Select-Object -First 1
          if (-not $sln) {
            Write-Error "Nenhuma solução (.sln) encontrada."
            exit 1
          }

          $solutionPath = $sln.FullName

          # Buscar o primeiro projeto principal, ignorando testes
          $csproj = Get-ChildItem -Path (Split-Path $solutionPath -Parent) -Recurse -Include *.csproj |
                    Where-Object { $_.FullName -notmatch '\\(Test|Tests|.IntegrationTests)[\\\/]' } |
                    Select-Object -First 1

          if (-not $csproj) {
            Write-Error "Nenhum projeto principal encontrado."
            exit 1
          }

          $csprojPath = $csproj.FullName
          $projectName = [System.IO.Path]::GetFileNameWithoutExtension($csproj.Name)

          echo "solutionPath=$solutionPath" >> $env:GITHUB_OUTPUT
          echo "csprojPath=$csprojPath" >> $env:GITHUB_OUTPUT
          echo "projectName=$projectName" >> $env:GITHUB_OUTPUT

      - name: Restore NuGet packages
        run: nuget restore "${{ steps.detect-paths.outputs.solutionPath }}"

      - name: Define Sonar project key
        id: sonar-key
        shell: pwsh
        run: |
          $org = "${{ secrets.SONAR_ORGANIZATION }}"
          $repo = "${{ github.repository }}" -replace '^.*/', ''
          $projectKey = "${repo}"
          echo "projectKey=$projectKey" > $env:GITHUB_OUTPUT

      - name: Ensure SonarCloud project exists
        shell: bash
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" \
            -u "${{secrets.SONAR_TOKEN}}:" \
            -d "organization=${{ secrets.SONAR_ORGANIZATION }}" \
            -d "name=${{ steps.sonar-key.outputs.projectKey }}" \
            -d "project=${{ steps.sonar-key.outputs.projectKey }}" \
            https://sonarcloud.io/api/projects/create)

          if [ "$response" -eq 200 ]; then
            echo "✅ SonarCloud project successfully created: key=$PROJECT_KEY, name=$PROJECT_KEY"
          elif [ "$response" -eq 409 ]; then
            echo "ℹ️ SonarCloud project already exists: key=$PROJECT_KEY"
          else
            echo "⚠️ Failed to create SonarCloud project (HTTP $response). Continuing with the workflow."
          fi

      - name: Begin SonarCloud analysis
        shell: pwsh
        run: |
          choco install sonarscanner-msbuild-net46 --no-progress
          SonarScanner.MSBuild.exe begin `
            /k:"${{ steps.sonar-key.outputs.projectKey }}" `
            /o:"${{ secrets.SONAR_ORGANIZATION }}" `
            /d:sonar.host.url="${{ secrets.SONAR_URL }}" `
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Build solution
        run: msbuild "${{ steps.detect-paths.outputs.solutionPath }}" /p:Configuration=Release

      - name: Run tests using VSTest
        shell: pwsh
        run: |
          $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -property installationPath
          $vstest = "$vsPath\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe"
          $dlls = Get-ChildItem -Recurse -Filter *Tests.dll | Where-Object { $_.FullName -like "*bin*Release*" }
          foreach ($dll in $dlls) { & $vstest $dll.FullName --logger:trx }

      - name: End SonarCloud analysis
        shell: pwsh
        run: SonarScanner.MSBuild.exe end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Pack all projects with dependencies
        shell: pwsh
        run: |
          $projects = "${{ steps.detect-paths.outputs.csprojList }}" -split ';' |
                      Where-Object { -not [string]::IsNullOrWhiteSpace($_) }
          foreach ($proj in $projects) {
            .\nuget.exe pack "`"$proj`"" `
              -Properties Configuration=Release `
              -IncludeReferencedProjects `
              -OutputDirectory nupkg
          }
      
      - name: Upload Release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: '**/bin/Release/**/*'              
          if-no-files-found: warn

      - name: Upload NuGet package artifact
        uses: actions/upload-artifact@v4
        with:
          name: nupkg
          path: nupkg/*.nupkg