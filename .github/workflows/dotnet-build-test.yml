name: Build, Test and Sonar Analysis

on:
  workflow_call:
    # Removido o input project-name, agora será detectado automaticamente

jobs:
  build-and-test:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.sln') }}

      - name: Detect solution and project paths
        id: detect-paths
        shell: pwsh
        run: |
          # Encontrar o arquivo .sln na raiz do repositório
          $sln = Get-ChildItem -Path "." -Filter "*.sln" -File
          
          if (-not $sln) {
            Write-Error "Não foi possível encontrar um arquivo .sln na raiz do repositório."
            exit 1
          }
          
          # Se houver mais de um .sln, use o primeiro
          if ($sln -is [array]) {
            $sln = $sln[0]
          }
          
          $solutionPath = $sln.FullName
          $projectName = [System.IO.Path]::GetFileNameWithoutExtension($sln.Name)
          
          # Estratégia de busca melhorada para projetos:
          # 1. Primeiro, procurar um diretório com o mesmo nome do projeto (padrão comum)
          $projectDir = Get-ChildItem -Path "." -Directory -Filter "$projectName" | Select-Object -First 1
          
          if ($projectDir) {
            # Procurar um .csproj dentro da pasta com nome do projeto
            $csproj = Get-ChildItem -Path $projectDir.FullName -Filter "*.csproj" | Select-Object -First 1
            
            if ($csproj) {
              Write-Host "Encontrado .csproj na pasta do projeto principal: $($csproj.FullName)"
            }
          }
          
          # 2. Se não encontrou na etapa anterior, procura um .csproj com nome igual ao da solução
          if (-not $csproj) {
            $csproj = Get-ChildItem -Recurse -Filter "$projectName.csproj" | Where-Object { -not $_.FullName.Contains(".Test") -and -not $_.FullName.Contains("Tests") } | Select-Object -First 1
            
            if ($csproj) {
              Write-Host "Encontrado .csproj com o mesmo nome da solução: $($csproj.FullName)"
            }
          }
          
          # 3. Se ainda não encontrou, procurar qualquer .csproj que não seja de teste
          if (-not $csproj) {
            $csproj = Get-ChildItem -Recurse -Filter "*.csproj" | Where-Object { -not $_.FullName.Contains(".Test") -and -not $_.FullName.Contains("Tests") } | Select-Object -First 1
            
            if ($csproj) {
              Write-Host "Encontrado .csproj não relacionado a testes: $($csproj.FullName)"
            }
          }
          
          # 4. Em último caso, usar qualquer .csproj
          if (-not $csproj) {
            $csproj = Get-ChildItem -Recurse -Filter "*.csproj" | Select-Object -First 1
            
            if (-not $csproj) {
              Write-Error "Não foi possível encontrar nenhum arquivo .csproj no repositório."
              exit 1
            }
            
            Write-Host "Usando primeiro .csproj encontrado: $($csproj.FullName)"
          }
          
          $csprojPath = $csproj.FullName
          $projectFolder = Split-Path $csprojPath -Parent
          
          Write-Host "Detectado: Solução '$solutionPath', Projeto '$csprojPath', Nome do Projeto '$projectName'"
          
          echo "solutionPath=$solutionPath" >> $env:GITHUB_OUTPUT
          echo "csprojPath=$csprojPath" >> $env:GITHUB_OUTPUT
          echo "projectFolder=$projectFolder" >> $env:GITHUB_OUTPUT
          echo "projectName=$projectName" >> $env:GITHUB_OUTPUT

      - name: Restore NuGet packages
        run: nuget restore "${{ steps.detect-paths.outputs.solutionPath }}"

      - name: Begin SonarCloud analysis
        shell: pwsh
        run: |
          choco install sonarscanner-msbuild-net46 --no-progress
          SonarScanner.MSBuild.exe begin `
            /k:"${{ secrets.SONAR_PROJECT_KEY }}" `
            /o:"${{ secrets.SONAR_ORGANIZATION }}" `
            /d:sonar.host.url="${{ secrets.SONAR_URL }}" `
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Build solution
        run: msbuild "${{ steps.detect-paths.outputs.solutionPath }}" /p:Configuration=Release

      - name: Run tests using VSTest
        shell: pwsh
        run: |
          $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -property installationPath
          $vstest = "$vsPath\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe"
          $dlls = Get-ChildItem -Recurse -Filter *Tests.dll | Where-Object { $_.FullName -like "*bin*Release*" }
          foreach ($dll in $dlls) { & $vstest $dll.FullName --logger:trx }

      - name: End SonarCloud analysis
        shell: pwsh
        run: SonarScanner.MSBuild.exe end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Download and Package with NuGet.exe
        shell: powershell
        run: |
          Invoke-WebRequest -Uri https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -OutFile nuget.exe
          ./nuget.exe pack "${{ steps.detect-paths.outputs.csprojPath }}" -Properties Configuration=Release -OutputDirectory nupkg

      - name: Upload NuGet package artifact
        uses: actions/upload-artifact@v4
        with:
          name: nupkg
          path: nupkg/*.nupkg