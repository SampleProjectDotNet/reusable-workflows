name: Build, Test and Sonar Analysis

on:
  workflow_call:
    inputs:
      projectType:
        description: 'Tipo do projeto (ClassLibrary ou WindowsForm)'
        required: true
        default: "WindowsForm"
        type: string

jobs:
  build-and-test:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Cache NuGet and build outputs
        uses: actions/cache@v4
        with:
          path: |
            packages/**
            **/obj
            **/bin/Release
          key: ${{ runner.os }}-build-${{ hashFiles('**/*.sln') }}
        
      - name: Detect solution and project paths
        id: detect-paths
        shell: pwsh
        run: |
            $sln = Get-ChildItem -Recurse -Filter '*.sln' -File | Select-Object -First 1
            if (-not $sln) { Write-Error 'Nenhuma solução (.sln) encontrada.'; exit 1 }
                
            $proj = Get-ChildItem -Recurse -Filter '*.csproj' -File |
              Where-Object FullName -NotMatch '\\.Test(s)?[\\/]+' |
              Select-Object -First 1
            if (-not $proj) { Write-Error 'Nenhum projeto .csproj encontrado.'; exit 1 }
                
            "solutionPath=$($sln.FullName)" >> $env:GITHUB_OUTPUT
            "csprojPath=$($proj.FullName)"     >> $env:GITHUB_OUTPUT

      - name: Begin SonarCloud analysis
        shell: pwsh
        run: |
          choco install sonarscanner-msbuild-net46 --no-progress
          $repo = "${{ github.repository }}" -replace '^.*/', ''
          SonarScanner.MSBuild.exe begin `
            /k:"$repo" `
            /o:"${{ secrets.SONAR_ORGANIZATION }}" `
            /d:sonar.host.url="${{ secrets.SONAR_URL }}" `
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Restore & Build 
        shell: pwsh
        run: |
          nuget restore "${{ steps.detect-paths.outputs.solutionPath }}"
          msbuild "${{ steps.detect-paths.outputs.solutionPath }}" /p:Configuration=Release

      - name: Run tests using VSTest
        shell: pwsh
        run: |
          $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -property installationPath
          $vstest = "$vsPath\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe"
          $dlls = Get-ChildItem -Recurse -Filter *Tests.dll | Where-Object { $_.FullName -like "*bin*Release*" }
          foreach ($dll in $dlls) { & $vstest $dll.FullName --logger:trx}

      - name: End SonarCloud analysis
        shell: pwsh
        run: SonarScanner.MSBuild.exe end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Download and Package with NuGet.exe
        if: ${{ inputs.projectType == 'ClassLibrary' }}
        shell: powershell
        run: |
          Invoke-WebRequest -Uri https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -OutFile nuget.exe
          ./nuget.exe pack "${{ steps.detect-paths.outputs.csprojPath }}" -Properties Configuration=Release -OutputDirectory nupkg
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.projectType == 'ClassLibrary' && 'nupkg' || 'release-artifacts' }}
          path: ${{ inputs.projectType == 'ClassLibrary' && 'nupkg/*.nupkg' || '**/bin/Release/**/*' }}

        
      