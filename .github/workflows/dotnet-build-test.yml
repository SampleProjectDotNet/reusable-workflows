name: Build, Test and Sonar Analysis

on:
  workflow_call:
    # Removido o input project-name, agora será detectado automaticamente

jobs:
  build-and-test:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.sln') }}

      - name: Detect solution and project paths
        id: detect-paths
        shell: pwsh
        run: |
          # 1) encontra .sln na raiz
          $sln = Get-ChildItem -Path "." -Filter "*.sln" -File | Select-Object -First 1
          if (-not $sln) { Write-Error "Solução não encontrada na raiz."; exit 1 }
          $solutionPath = $sln.FullName
          $projectName  = [IO.Path]::GetFileNameWithoutExtension($sln.Name)

          # 2) busca todos os .csproj não-teste recursivamente
          $candidates = Get-ChildItem -Recurse -Filter "*.csproj" | 
                        Where-Object { $_.Name -like "$projectName.csproj" -or $_.DirectoryName -match "\\$projectName$" } |
                        Where-Object { $_.FullName -notmatch '\.Test(s)?[\\/]' }

          # 3) se não achar nome exato, tenta qualquer não-teste
          if (-not $candidates) {
            $candidates = Get-ChildItem -Recurse -Filter "*.csproj" |
                          Where-Object { $_.FullName -notmatch '\.Test(s)?[\\/]' }
          }

          # 4) ordena por profundidade de pasta (menos pastas = mais “raiz”) e escolhe o primeiro
          $csproj = $candidates | Sort-Object { $_.FullName.Split('\').Count } | Select-Object -First 1
          if (-not $csproj) { Write-Error "Nenhum .csproj adequado encontrado."; exit 1 }
          $csprojPath = $csproj.FullName

          Write-Host "Usando solução: $solutionPath"
          Write-Host "Usando projeto:  $csprojPath"

          echo "solutionPath=$solutionPath"  >> $env:GITHUB_OUTPUT
          echo "csprojPath=$csprojPath"      >> $env:GITHUB_OUTPUT
          echo "projectName=$projectName"    >> $env:GITHUB_OUTPUT


      - name: Restore NuGet packages
        run: nuget restore

      - name: Begin SonarCloud analysis
        shell: pwsh
        run: |
          choco install sonarscanner-msbuild-net46 --no-progress
          SonarScanner.MSBuild.exe begin `
            /k:"${{ secrets.SONAR_PROJECT_KEY }}" `
            /o:"${{ secrets.SONAR_ORGANIZATION }}" `
            /d:sonar.host.url="${{ secrets.SONAR_URL }}" `
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Build solution
        run: msbuild "${{ steps.detect-paths.outputs.solutionPath }}" /p:Configuration=Release

      - name: Run tests using VSTest
        shell: pwsh
        run: |
          $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -property installationPath
          $vstest = "$vsPath\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe"
          $dlls = Get-ChildItem -Recurse -Filter *Tests.dll | Where-Object { $_.FullName -like "*bin*Release*" }
          foreach ($dll in $dlls) { & $vstest $dll.FullName --logger:trx }

      - name: End SonarCloud analysis
        shell: pwsh
        run: SonarScanner.MSBuild.exe end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Download and Package with NuGet.exe
        shell: powershell
        run: |
          Invoke-WebRequest -Uri https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -OutFile nuget.exe
          ./nuget.exe pack "${{ steps.detect-paths.outputs.csprojPath }}" -Properties Configuration=Release -OutputDirectory nupkg

      - name: Upload NuGet package artifact
        uses: actions/upload-artifact@v4
        with:
          name: nupkg
          path: nupkg/*.nupkg